export const 
listing = `export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
xport function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}
export function fibonacci(n: number): number {
  return n + (n > 1 ? fibonacci(n - 1) : 1)
}`;

